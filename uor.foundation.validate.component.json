{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://uor.foundation/validate.component",
  "title": "UOR Validate Component Schema",
  "description": "Schema defining the validation component in the UOR system",
  "type": "object",
  "required": [
    "id",
    "name",
    "implementedInterfaces"
  ],
  "properties": {
    "id": {
      "type": "string",
      "format": "uri",
      "description": "Unique identifier for the component",
      "default": "https://uor.foundation/validate.component"
    },
    "name": {
      "type": "string",
      "description": "Name of the component",
      "default": "SchemaValidator"
    },
    "description": {
      "type": "string",
      "description": "Description of the component purpose",
      "default": "Component that implements schema validation functionality"
    },
    "implementedInterfaces": {
      "type": "array",
      "description": "Interfaces implemented by this component",
      "items": {
        "type": "string",
        "format": "uri"
      },
      "default": [
        "https://uor.foundation/validate.interface"
      ]
    },
    "implementation": {
      "type": "object",
      "description": "Implementation details of the component",
      "properties": {
        "language": {
          "type": "string",
          "description": "Implementation language",
          "default": "JavaScript"
        },
        "methods": {
          "type": "object",
          "description": "Method implementations",
          "properties": {
            "validate": {
              "type": "object",
              "description": "Implementation of the validate method",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function validate(targetSchemaUri, referenceSchemaUri, mode = 'strict') {\n  try {\n    const targetSchema = resolveSchema(targetSchemaUri);\n    const referenceSchema = resolveSchema(referenceSchemaUri);\n    \n    if (!targetSchema || !referenceSchema) {\n      this._lastError = 'Failed to resolve one or both schemas';\n      return false;\n    }\n    \n    // Perform validation based on mode\n    switch (mode) {\n      case 'strict':\n        return validateStrict(targetSchema, referenceSchema);\n      case 'lenient':\n        return validateLenient(targetSchema, referenceSchema);\n      case 'structural':\n        return validateStructural(targetSchema, referenceSchema);\n      default:\n        return validateStrict(targetSchema, referenceSchema);\n    }\n  } catch (error) {\n    this._lastError = error.message;\n    return false;\n  }\n}"
                }
              }
            },
            "validateWithDetails": {
              "type": "object",
              "description": "Implementation of the validateWithDetails method",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function validateWithDetails(targetSchemaUri, referenceSchemaUri, mode = 'strict') {\n  try {\n    const targetSchema = resolveSchema(targetSchemaUri);\n    const referenceSchema = resolveSchema(referenceSchemaUri);\n    \n    if (!targetSchema || !referenceSchema) {\n      return {\n        valid: false,\n        errors: [{\n          path: '',\n          message: 'Failed to resolve one or both schemas',\n          severity: 'error'\n        }]\n      };\n    }\n    \n    // Perform validation based on mode\n    let result;\n    switch (mode) {\n      case 'strict':\n        result = validateStrictWithDetails(targetSchema, referenceSchema);\n        break;\n      case 'lenient':\n        result = validateLenientWithDetails(targetSchema, referenceSchema);\n        break;\n      case 'structural':\n        result = validateStructuralWithDetails(targetSchema, referenceSchema);\n        break;\n      default:\n        result = validateStrictWithDetails(targetSchema, referenceSchema);\n    }\n    \n    this._lastResult = result;\n    return result;\n  } catch (error) {\n    this._lastError = error.message;\n    return {\n      valid: false,\n      errors: [{\n        path: '',\n        message: error.message,\n        severity: 'error'\n      }]\n    };\n  }\n}"
                }
              }
            },
            "validateInstance": {
              "type": "object",
              "description": "Implementation of the validateInstance method",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function validateInstance(instance, schemaUri) {\n  try {\n    const schema = resolveSchema(schemaUri);\n    \n    if (!schema) {\n      this._lastError = 'Failed to resolve schema';\n      return false;\n    }\n    \n    // Parse instance if it's a string\n    let instanceObj = instance;\n    if (typeof instance === 'string') {\n      try {\n        instanceObj = JSON.parse(instance);\n      } catch (e) {\n        this._lastError = 'Invalid JSON in instance';\n        return false;\n      }\n    }\n    \n    // Validate instance against schema\n    return validateInstanceAgainstSchema(instanceObj, schema);\n  } catch (error) {\n    this._lastError = error.message;\n    return false;\n  }\n}"
                }
              }
            },
            "validateInstanceWithDetails": {
              "type": "object",
              "description": "Implementation of the validateInstanceWithDetails method",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function validateInstanceWithDetails(instance, schemaUri) {\n  try {\n    const schema = resolveSchema(schemaUri);\n    \n    if (!schema) {\n      return {\n        valid: false,\n        errors: [{\n          path: '',\n          message: 'Failed to resolve schema',\n          severity: 'error'\n        }]\n      };\n    }\n    \n    // Parse instance if it's a string\n    let instanceObj = instance;\n    if (typeof instance === 'string') {\n      try {\n        instanceObj = JSON.parse(instance);\n      } catch (e) {\n        return {\n          valid: false,\n          errors: [{\n            path: '',\n            message: 'Invalid JSON in instance',\n            severity: 'error'\n          }]\n        };\n      }\n    }\n    \n    // Validate instance against schema with details\n    const result = validateInstanceAgainstSchemaWithDetails(instanceObj, schema);\n    this._lastResult = result;\n    return result;\n  } catch (error) {\n    this._lastError = error.message;\n    return {\n      valid: false,\n      errors: [{\n        path: '',\n        message: error.message,\n        severity: 'error'\n      }]\n    };\n  }\n}"
                }
              }
            },
            "getLastValidationError": {
              "type": "object",
              "description": "Implementation of the getLastValidationError method",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function getLastValidationError() {\n  return this._lastError || '';\n}"
                }
              }
            }
          }
        },
        "helpers": {
          "type": "object",
          "description": "Helper functions",
          "properties": {
            "resolveSchema": {
              "type": "object",
              "description": "Helper to resolve a schema by URI",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function resolveSchema(uri) {\n  // Implementation would use the UOR system's schema resolution mechanism\n  // This is a placeholder for the actual implementation\n  return UOR.resolve(uri);\n}"
                }
              }
            },
            "validateStrict": {
              "type": "object",
              "description": "Helper for strict validation",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function validateStrict(targetSchema, referenceSchema) {\n  // Strict validation requires all properties in reference schema to be present\n  // and all constraints to be satisfied\n  try {\n    const result = validateStrictWithDetails(targetSchema, referenceSchema);\n    return result.valid;\n  } catch (error) {\n    return false;\n  }\n}"
                }
              }
            },
            "validateStrictWithDetails": {
              "type": "object",
              "description": "Helper for strict validation with details",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code implementation",
                  "default": "function validateStrictWithDetails(targetSchema, referenceSchema) {\n  const errors = [];\n  \n  // Check required properties\n  if (referenceSchema.required) {\n    for (const requiredProp of referenceSchema.required) {\n      if (!targetSchema.required || !targetSchema.required.includes(requiredProp)) {\n        errors.push({\n          path: `required[${requiredProp}]`,\n          message: `Required property '${requiredProp}' is missing from target schema`,\n          severity: 'error'\n        });\n      }\n    }\n  }\n  \n  // Check property types and constraints\n  if (referenceSchema.properties) {\n    for (const [propName, propSchema] of Object.entries(referenceSchema.properties)) {\n      if (!targetSchema.properties || !targetSchema.properties[propName]) {\n        errors.push({\n          path: `properties.${propName}`,\n          message: `Property '${propName}' is missing from target schema`,\n          severity: 'error'\n        });\n        continue;\n      }\n      \n      const targetPropSchema = targetSchema.properties[propName];\n      \n      // Check type\n      if (propSchema.type && targetPropSchema.type !== propSchema.type) {\n        errors.push({\n          path: `properties.${propName}.type`,\n          message: `Property '${propName}' has incorrect type: expected '${propSchema.type}', got '${targetPropSchema.type}'`,\n          severity: 'error'\n        });\n      }\n      \n      // Check format if specified\n      if (propSchema.format && targetPropSchema.format !== propSchema.format) {\n        errors.push({\n          path: `properties.${propName}.format`,\n          message: `Property '${propName}' has incorrect format: expected '${propSchema.format}', got '${targetPropSchema.format || 'none'}'`,\n          severity: 'error'\n        });\n      }\n      \n      // Check enum if specified\n      if (propSchema.enum) {\n        if (!targetPropSchema.enum) {\n          errors.push({\n            path: `properties.${propName}.enum`,\n            message: `Property '${propName}' should have enum constraint`,\n            severity: 'error'\n          });\n        } else {\n          // Check if all enum values are included\n          for (const enumValue of propSchema.enum) {\n            if (!targetPropSchema.enum.includes(enumValue)) {\n              errors.push({\n                path: `properties.${propName}.enum`,\n                message: `Property '${propName}' enum is missing value '${enumValue}'`,\n                severity: 'error'\n              });\n            }\n          }\n        }\n      }\n      \n      // Recursively check nested objects\n      if (propSchema.type === 'object' && propSchema.properties) {\n        const nestedResult = validateStrictWithDetails(\n          targetPropSchema,\n          propSchema\n        );\n        \n        if (!nestedResult.valid) {\n          for (const error of nestedResult.errors) {\n            errors.push({\n              path: `properties.${propName}.${error.path}`,\n              message: error.message,\n              severity: error.severity\n            });\n          }\n        }\n      }\n      \n      // Check array items\n      if (propSchema.type === 'array' && propSchema.items) {\n        if (!targetPropSchema.items) {\n          errors.push({\n            path: `properties.${propName}.items`,\n            message: `Property '${propName}' should define items schema`,\n            severity: 'error'\n          });\n        } else {\n          const nestedResult = validateStrictWithDetails(\n            targetPropSchema.items,\n            propSchema.items\n          );\n          \n          if (!nestedResult.valid) {\n            for (const error of nestedResult.errors) {\n              errors.push({\n                path: `properties.${propName}.items.${error.path}`,\n                message: error.message,\n                severity: error.severity\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors: errors\n  };\n}"
                }
              }
            }
          }
        }
      }
    },
    "compatibleEntityTypes": {
      "type": "array",
      "description": "Types of entities this component can be attached to",
      "items": {
        "type": "string"
      },
      "default": [
        "validate.entity"
      ]
    }
  },
  "schemaType": "component"
}