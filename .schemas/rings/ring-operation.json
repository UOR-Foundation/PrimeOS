{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://uor.foundation/schemas/algebra/rings/ring-operation.json",
  "title": "Ring Operation Schema",
  "description": "Schema defining operations on ring elements within the UOR framework",
  "type": "object",
  "required": ["id", "type", "ringDomain", "operationType", "operands", "result", "primeCoordinateMapping"],
  "properties": {
    "id": {
      "type": "string",
      "format": "uri",
      "description": "Unique identifier for the ring operation"
    },
    "type": {
      "type": "string",
      "const": "RingOperation",
      "description": "Type of the mathematical entity"
    },
    "ringDomain": {
      "type": "string",
      "format": "uri",
      "description": "Reference to the ring domain this operation belongs to"
    },
    "operationType": {
      "type": "string",
      "enum": [
        "addition",
        "subtraction",
        "multiplication",
        "division",
        "exponentiation",
        "gcd",
        "lcm",
        "modulo",
        "remainder"
      ],
      "description": "Type of ring operation"
    },
    "operands": {
      "type": "array",
      "minItems": 1,
      "maxItems": 3,
      "description": "The operands of the operation",
      "items": {
        "type": "object",
        "required": ["elementId", "representation"],
        "properties": {
          "elementId": {
            "type": "string",
            "format": "uri",
            "description": "Reference to the ring element"
          },
          "representation": {
            "type": "string",
            "description": "Representation of the operand"
          },
          "primeDecomposition": {
            "type": "object",
            "description": "Prime decomposition of the operand",
            "properties": {
              "unit": {
                "type": "string",
                "description": "Unit factor"
              },
              "factors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "prime": {
                      "type": "string",
                      "description": "Prime factor"
                    },
                    "exponent": {
                      "type": "integer",
                      "description": "Exponent of the prime factor"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "result": {
      "type": "object",
      "required": ["elementId", "representation"],
      "properties": {
        "elementId": {
          "type": "string",
          "format": "uri",
          "description": "Reference to the resulting ring element"
        },
        "representation": {
          "type": "string",
          "description": "Representation of the result"
        },
        "primeDecomposition": {
          "type": "object",
          "description": "Prime decomposition of the result",
          "properties": {
            "unit": {
              "type": "string",
              "description": "Unit factor"
            },
            "factors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "prime": {
                    "type": "string",
                    "description": "Prime factor"
                  },
                  "exponent": {
                    "type": "integer",
                    "description": "Exponent of the prime factor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "primeCoordinateMapping": {
      "type": "object",
      "required": ["mappingType", "description"],
      "description": "How the operation acts on prime coordinates",
      "properties": {
        "mappingType": {
          "type": "string",
          "enum": [
            "coordinate-addition",
            "coordinate-subtraction",
            "exponent-addition",
            "exponent-subtraction",
            "exponent-multiplication",
            "exponent-minimum",
            "exponent-maximum",
            "complex-mapping",
            "logarithmic-bridge",
            "special-case"
          ],
          "description": "Type of mapping in prime coordinate space"
        },
        "description": {
          "type": "string",
          "description": "Description of how the operation transforms prime coordinates"
        },
        "formula": {
          "type": "string",
          "description": "Mathematical formula for the coordinate transformation"
        },
        "homomorphismProperties": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "preserves-structure",
              "preserves-ordering",
              "coordinate-wise",
              "non-linear",
              "context-dependent",
              "requires-conversion"
            ]
          },
          "description": "Properties of the homomorphism in prime coordinates"
        },
        "specialCases": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "condition": {
                "type": "string",
                "description": "Condition for the special case"
              },
              "mapping": {
                "type": "string",
                "description": "Mapping for this special case"
              }
            }
          },
          "description": "Special cases in the prime coordinate mapping"
        }
      }
    },
    "operationProperties": {
      "type": "object",
      "description": "Properties of this specific operation instance",
      "properties": {
        "isClosed": {
          "type": "boolean",
          "description": "Whether the operation is closed (result is in the same ring)"
        },
        "isAssociative": {
          "type": "boolean",
          "description": "Whether the operation is associative in this context"
        },
        "isCommutative": {
          "type": "boolean",
          "description": "Whether the operation is commutative for these operands"
        },
        "hasIdentity": {
          "type": "boolean",
          "description": "Whether the operation has an identity element"
        },
        "identityElement": {
          "type": "string",
          "description": "The identity element for this operation (if applicable)"
        },
        "isDistributive": {
          "type": "boolean",
          "description": "Whether the operation is distributive over another operation"
        },
        "distributiveOver": {
          "type": "string",
          "description": "The operation this operation is distributive over"
        }
      }
    },
    "computationalAspects": {
      "type": "object",
      "description": "Computational aspects of the operation",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "Algorithm used to compute the operation"
        },
        "timeComplexity": {
          "type": "string",
          "description": "Time complexity of the operation"
        },
        "spaceComplexity": {
          "type": "string",
          "description": "Space complexity of the operation"
        },
        "optimalityProof": {
          "type": "string",
          "description": "Reference to proof that the algorithm is optimal"
        },
        "numericalStability": {
          "type": "string",
          "description": "Numerical stability properties (if applicable)"
        }
      }
    },
    "observerFrameTransformations": {
      "type": "object",
      "description": "How this operation transforms between observer frames",
      "properties": {
        "sourceFrame": {
          "type": "string",
          "description": "Source observer frame"
        },
        "targetFrame": {
          "type": "string",
          "description": "Target observer frame"
        },
        "transformationRule": {
          "type": "string",
          "description": "Rule for transforming between frames"
        },
        "invariants": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Properties that remain invariant under the transformation"
        }
      }
    },
    "coherenceMeasures": {
      "type": "object",
      "description": "Coherence measures for this operation",
      "properties": {
        "operationComplexity": {
          "type": "number",
          "description": "Complexity measure of the operation"
        },
        "informationPreservation": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Measure of how well the operation preserves information (1 = lossless)"
        },
        "structurePreservation": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Measure of how well the operation preserves structure (1 = perfectly preserved)"
        },
        "errorBound": {
          "type": "string",
          "description": "Bound on any error introduced by the operation (if applicable)"
        }
      }
    },
    "applications": {
      "type": "array",
      "description": "Applications of this specific operation",
      "items": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Application domain"
          },
          "description": {
            "type": "string",
            "description": "Description of the application"
          },
          "examples": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Examples of applications"
          }
        }
      }
    },
    "relatedTheorems": {
      "type": "array",
      "description": "Theorems related to this operation",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the theorem"
          },
          "statement": {
            "type": "string",
            "description": "Statement of the theorem"
          },
          "relevance": {
            "type": "string",
            "description": "Relevance to this operation"
          }
        }
      }
    }
  },
  "examples": [
    {
      "id": "urn:uor:algebra:ring:integers:operation:multiplication:2x3",
      "type": "RingOperation",
      "ringDomain": "urn:uor:algebra:ring:integers",
      "operationType": "multiplication",
      "operands": [
        {
          "elementId": "urn:uor:algebra:ring:integers:element:2",
          "representation": "2",
          "primeDecomposition": {
            "unit": "1",
            "factors": [
              {
                "prime": "2",
                "exponent": 1
              }
            ]
          }
        },
        {
          "elementId": "urn:uor:algebra:ring:integers:element:3",
          "representation": "3",
          "primeDecomposition": {
            "unit": "1",
            "factors": [
              {
                "prime": "3",
                "exponent": 1
              }
            ]
          }
        }
      ],
      "result": {
        "elementId": "urn:uor:algebra:ring:integers:element:6",
        "representation": "6",
        "primeDecomposition": {
          "unit": "1",
          "factors": [
            {
              "prime": "2",
              "exponent": 1
            },
            {
              "prime": "3",
              "exponent": 1
            }
          ]
        }
      },
      "primeCoordinateMapping": {
        "mappingType": "exponent-addition",
        "description": "For multiplication, exponents of the same prime factors are added",
        "formula": "exponent(p, a × b) = exponent(p, a) + exponent(p, b) for each prime p",
        "homomorphismProperties": [
          "preserves-structure",
          "coordinate-wise"
        ]
      },
      "operationProperties": {
        "isClosed": true,
        "isAssociative": true,
        "isCommutative": true,
        "hasIdentity": true,
        "identityElement": "1",
        "isDistributive": true,
        "distributiveOver": "addition"
      },
      "computationalAspects": {
        "algorithm": "Standard integer multiplication",
        "timeComplexity": "O(log(a) × log(b)) for basic algorithm, can be improved",
        "spaceComplexity": "O(log(a) + log(b))",
        "optimalityProof": "Lower bound for general integer multiplication is Ω(n log n 2^O(log* n)) where n is the number of bits",
        "numericalStability": "Exact computation for integers"
      },
      "observerFrameTransformations": {
        "sourceFrame": "Standard-Integer-Frame",
        "targetFrame": "Prime-Factorization-Frame",
        "transformationRule": "Multiply the operands, then factor the result",
        "invariants": [
          "value",
          "prime factorization structure"
        ]
      },
      "coherenceMeasures": {
        "operationComplexity": 1.0,
        "informationPreservation": 1.0,
        "structurePreservation": 1.0,
        "errorBound": "0 (exact computation)"
      },
      "applications": [
        {
          "domain": "Number Theory",
          "description": "Fundamental operation in integer arithmetic",
          "examples": [
            "Counting problems",
            "Combinatorial calculations",
            "Divisibility analysis"
          ]
        },
        {
          "domain": "Computer Science",
          "description": "Basic operation implemented in processors",
          "examples": [
            "Binary multiplication circuits",
            "ALU operations",
            "Algorithm implementations"
          ]
        }
      ],
      "relatedTheorems": [
        {
          "name": "Fundamental Theorem of Arithmetic",
          "statement": "Every integer greater than 1 can be expressed as a product of prime numbers in a unique way, up to the order of the factors",
          "relevance": "Guarantees that the prime factorization of the product 2 × 3 = 6 is unique and well-defined"
        },
        {
          "name": "Associativity of Integer Multiplication",
          "statement": "(a × b) × c = a × (b × c) for all integers a, b, c",
          "relevance": "Ensures that the order of multiplications doesn't matter"
        }
      ]
    }
  ]
}
