{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://uor.foundation/validate.interface",
  "title": "UOR Validate Interface Schema",
  "description": "Schema defining the interface for validation operations in the UOR system",
  "type": "object",
  "required": [
    "id",
    "name",
    "idl"
  ],
  "properties": {
    "id": {
      "type": "string",
      "format": "uri",
      "description": "Unique identifier for the interface"
    },
    "name": {
      "type": "string",
      "const": "ValidateInterface",
      "description": "Name of the interface"
    },
    "description": {
      "type": "string",
      "default": "Interface for performing schema validation operations",
      "description": "Description of the interface purpose"
    },
    "version": {
      "type": "string",
      "default": "1.0.0",
      "description": "Version of the interface"
    },
    "idl": {
      "type": "string",
      "description": "Web IDL definition of the interface",
      "default": "interface ValidateInterface {\n  boolean validate(DOMString targetSchemaUri, DOMString referenceSchemaUri, optional DOMString mode);\n  ValidationResult validateWithDetails(DOMString targetSchemaUri, DOMString referenceSchemaUri, optional DOMString mode);\n  boolean validateInstance(DOMString instance, DOMString schemaUri);\n  ValidationResult validateInstanceWithDetails(DOMString instance, DOMString schemaUri);\n  DOMString getLastValidationError();\n};\n\ninterface ValidationResult {\n  readonly attribute boolean valid;\n  readonly attribute FrozenArray<ValidationError> errors;\n};\n\ninterface ValidationError {\n  readonly attribute DOMString path;\n  readonly attribute DOMString message;\n  readonly attribute DOMString severity;\n};"
    },
    "uorExtensions": {
      "type": "object",
      "description": "UOR-specific extensions",
      "properties": {
        "extends": {
          "type": "array",
          "description": "Interfaces that this interface extends",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "sourceEntityTypes": {
          "type": "array",
          "description": "Types of entities that can implement this interface",
          "items": {
            "type": "string"
          },
          "default": [
            "validate.entity"
          ]
        },
        "targetEntityTypes": {
          "type": "array",
          "description": "Types of entities that can be targets of this interface",
          "items": {
            "type": "string"
          }
        },
        "transport": {
          "type": "object",
          "description": "Transport protocol mappings",
          "properties": {
            "jsonRpc": {
              "type": "object",
              "description": "JSON-RPC mapping",
              "properties": {
                "methods": {
                  "type": "object",
                  "description": "Mapping of interface methods to JSON-RPC methods",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "default": {
                    "validate": "validate",
                    "validateWithDetails": "validateWithDetails",
                    "validateInstance": "validateInstance",
                    "validateInstanceWithDetails": "validateInstanceWithDetails",
                    "getLastValidationError": "getLastValidationError"
                  }
                }
              }
            },
            "rest": {
              "type": "object",
              "description": "REST mapping",
              "properties": {
                "endpoints": {
                  "type": "array",
                  "description": "REST endpoint mappings",
                  "items": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "enum": [
                          "GET",
                          "POST",
                          "PUT",
                          "DELETE",
                          "PATCH"
                        ]
                      },
                      "path": {
                        "type": "string"
                      },
                      "interfaceMethod": {
                        "type": "string"
                      }
                    }
                  },
                  "default": [
                    {
                      "method": "POST",
                      "path": "/validate",
                      "interfaceMethod": "validate"
                    },
                    {
                      "method": "POST",
                      "path": "/validate/details",
                      "interfaceMethod": "validateWithDetails"
                    },
                    {
                      "method": "POST",
                      "path": "/validate/instance",
                      "interfaceMethod": "validateInstance"
                    },
                    {
                      "method": "POST",
                      "path": "/validate/instance/details",
                      "interfaceMethod": "validateInstanceWithDetails"
                    },
                    {
                      "method": "GET",
                      "path": "/validate/error",
                      "interfaceMethod": "getLastValidationError"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "type": "array",
      "description": "Example implementations of the interface",
      "items": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "implementation": {
            "type": "string"
          }
        }
      },
      "default": [
        {
          "description": "Basic validation example",
          "implementation": "// Validate a schema against a reference schema\nconst valid = validate('https://uor.foundation/component', 'https://uor.foundation/entity');\nconsole.log(valid ? 'Valid' : 'Invalid');\n\n// Get detailed validation results\nconst result = validateWithDetails('https://uor.foundation/component', 'https://uor.foundation/entity');\nconsole.log(`Valid: ${result.valid}`);\nresult.errors.forEach(err => console.log(`${err.severity} at ${err.path}: ${err.message}`));"
        }
      ]
    }
  },
  "schemaType": "interface"
}